1:
- order does not matter???
- no repetition
- formula: n! / r!(n-r)!
- n = 4 * 5 = 20, r = 12
20! / 12!*(20-12)! = 12650

als order uitmaakt:
n! / (n-r)! = 20! / (20-12)! = 60.339.831.552.000

2:
- order matters
- repetition allowed
- formula: n^r
- n = 3, r = 20
3^20 = 3.486.784.401

3:
- order does not matter
- repetition allowed
- formula: (r+n-1)! / r!(n-1)
- n = 3, r = 25
(25 + 3-1)! / 25!(3-1) = 351

4:
- order does not matter????
- no repetition
- formula: n! / r!(n-r)! + n! / r!(n-r)! + n! / r!(n-r)!
- n = 110, r = 30, 31 and 32
110! / 30!(110 - 30)! + 110! / 31!(110 - 31)! + 110! / 32!(110 - 32)! = 121.548.571.900

5:
- order does not matter (according to the mathsisfun page)
- no repetition
- formula: n! / r!(n-r)!
- n = 26, r = 7
26! / 7!(26-7)! = 3.315.312.000
kans is 1/3.315.312.000

n^r if order does matter:
26^7 = 8.031.810.176

6:
- order does not matter
- repetition allowed
- formula: (r+n-1)! / r!(n-1)
- n = 2, r = 45 - i (see text under here)
For each possible value of broodjes dozen, calculate the possible combinations of fruit and water using the formula, then add all of those together. In a python script:

import math

total = 45
n = 2
total_possibilities = 0

# for each possible value of brood, find all combinations of other 2 boxes
for i in range(30, -1, -1):
    total = 45
    r = total - i
    possibilities = math.factorial((r+n-1)) / (math.factorial(r) * (n-1))

    total_possibilities += possibilities

print(total_possibilities)

This gives a total of 961 different loads.


7:
case: railNL

variabelen: Stations, Trajecten, Reistijden, Verbindingen.

versimpelde aannames: ze mogen op zelfde moment op zelfde verbinding rijden. Ze mogen op hetzelfde moment op hetzelfde station zijn. Trein kan meerdere keren over zelfde verbinding. Als verbinding is gereden is het goed, maakt niet uit welke kant de trein op gaat. 

Volgorde maakt niet uit, Repetitie = ja

Hoeveel verbindingen kan 1 trein maximaal rijden in 2 uur? 14

Hoeveel minimaal nodig? 4

n = 56, r = 14 (per trein)




